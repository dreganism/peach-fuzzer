<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://phed.org/2008/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://phed.org/2008/Peach ../peach.xsd" version="1.0"
        author="Michael Eddington" description="Hello World Example">

    <!--

    This is a very simple Hello World example.

    Syntax:

      python peach.py samples\HelloWorld.xml

    Output:

      This example will display all each test case to the console, you should see lots of test data
      scroll along.  This example should only take a couple minutes to complete.

    Authors:
      Michael Eddington (mike@phed.org)

    $Id: HelloWorld.xml 1768 2009-06-18 04:32:33Z meddingt $

    -->

    <!-- Import defaults for Peach instance -->
    <Include ns="default" src="file:defaults.xml" />

    <!-- Create a simple data template containing a single string -->
    <DataModel name="HelloWorldTemplate">
            <Blob />
    </DataModel>

	<!-- This is our simple png state model -->
	<StateModel name="TheState" initialState="Initial">
	        <State name="Initial">
	
	                <!-- Write out our png file -->
	                <Action type="output">
	                        <DataModel ref="TheDataModel"/>
	
	                        <!-- This is our folder of sample files to read in -->
	                        <Data name="data" fileName="samples_png/*.png"/>
	                </Action>
	
	                <Action type="close"/>
	
	                <!-- Launch the target process -->
	                <Action type="call" method="LaunchViewer" publisher="Peach.Agent"/>
	        </State>
	</StateModel>

	<Agent name="WinAgent">
	   <Monitor class="WindowsDebugger">

	        <!-- The command line to run.  Notice the filename provided matched up
	             to what is provided below in the Publisher configuration -->
	        <Param name="CommandLine" value="mspaint.exe fuzzed.png" />

	        <!-- This parameter will cause the debugger to wait for an action-call in
	             the state model with a method="LaunchViewer" before running
	             program.
	        -->
	        <Param name="StartOnCall" value="LaunchViewer" />

	        <!-- This parameter will cause the monitor to terminate the process
	             once the CPU usage reaches zero.
	        -->
	        <Param name="CpuKill" value="true"/>

	    </Monitor>

	    <!-- Enable heap debugging on our process as well. -->
	    <Monitor class="PageHeap">
	        <Param name="Executable" value="mspaint.exe"/>
	    </Monitor>

	</Agent>

	<Agent name="LinAgent">
	    <!-- Register for core file notifications. -->
	    <Monitor class="LinuxDebugger"/>

	        <!-- This is the program we're going to run inside of the debugger -->
	        <Param name="Executable" value="feh"/>

	        <!-- These are arguments to the executable we want to run -->
	        <Param name="Arguments"  value="fuzzed.png"/>

	        <!-- This parameter will cause the monitor to terminate the process
	             once the CPU usage reaches zero.
	        -->
	        <Param name="CpuKill" value="true"/>

	</Agent>

	<Agent name="OsxAgent">
	    <Monitor class="CrashWrangler">
	        <!-- The executable to run. -->
	        <Param name="Command" value="/Applications/Safari.app/Contents/MacOS/Safari" />

	        <!-- The program arguments.  Notice the filename provided matched up
	             to what is provided below in the Publisher configuration -->
	        <Param name="Arguments" value="fuzzed.png" />

	        <!-- Do not use debug malloc. -->
	        <Param name="UseDebugMalloc" value="false" />

	        <!-- Treat read access violations as exploitable. -->
	        <Param name="ExploitableReads" value="true" />

	        <!-- Path to Crash Wrangler Execution Handler program. -->
	        <Param name="ExecHandler" value="/usr/local/bin/exc_handler" />

	        <!-- This parameter will cause the monitor to wait for an action-call in
	             the state model with a method="LaunchViewer" before running
	             program.
	        -->
	        <Param name="StartOnCall" value="LaunchViewer" />

	    </Monitor>
	</Agent>

    <Test name="DefaultTest">
	    <Agent ref="WinAgent" platform="windows"/>
	    <Agent ref="LinAgent" platform="linux"/>
	    <Agent ref="OsxAgent" platform="osx"/>

	    <StateModel ref="TheState"/>

	    <Publisher class="File">
	        <Param name="FileName" value="fuzzed.png"/>
	    </Publisher>

	    <Strategy class="Random"/>

	    <Logger class="Filesystem">
	        <Param name="Path" value="logs" />
	    </Logger>
	</Test>

    <!-- Configure a single run -->
    <Run name="DefaultRun" description="fuzzed.png DefaultTest Run">

            <Test ref="DefaultTest" />

    </Run>

</Peach>
<!-- end -->
